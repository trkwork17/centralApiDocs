openapi: 3.0.2
servers:
  - url: /v3
info:
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  version: 1.0.17
  title: Swagger Petstore - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
  - name: user
    description: Operations about user

paths:
  /pet:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        description: Create a new pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        description: Update an existent pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Find pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds pets by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: [ ]
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    post:
      tags:
        - pet
      summary: Update a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    delete:
      tags:
        - pet
      summary: Delete a pet
      description: ''
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: Upload an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Find pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      x-swagger-router-controller: OrderController
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: [ ]
  /store/order/v1:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      x-swagger-router-controller: OrderController
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
  /store/order/v2:
    post:
      tags:
        - store
      summary: Place an order for a pet (v2)
      description: Place a new order in the store with v2 endpoint
      operationId: placeOrderV2
      x-swagger-router-controller: OrderController
      responses:
        '201':
          description: Order successfully placed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
        '405':
          description: Invalid input
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      x-swagger-router-controller: OrderController
      description: For valid response try integer IDs with value less than 5 or > 10. Other values
        will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      x-swagger-router-controller: OrderController
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /agent/create_agent:
    post:
      tags:
        - agent account
      summary: Create Account
      description: This is one of the Free Routes.
      operationId: createUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      requestBody:
        content:
          application/form-data:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object

  /get_access_token:
    get:
      tags:
        - get_access_token for operations
      summary: Get Access Token
      description: |
        This endpoint provides an access token required for authorization. 
        The token is valid for a limited duration.

      security:
        - BearerAuth: [ ]

      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The access token for authorization
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'

        '404':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeaderMiss'
  /get_test_access_token:
    get:
      tags:
        - get_test_access_token
      summary: Get Access Token For Test
      description: |
        This endpoint provides an access test token required for authorization. 
        The token is valid for a limited duration.

      security:
        - BearerAuth: [ ]

      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The access token for authorization
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'

        '404':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeaderMiss'




  /api_agent/booking/booking:
    post:
      tags:
        - Agent one Way Booking Route
      summary: Create Account
      description: This is a private Route.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'

      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '200':
          description: Successful response
          content:
            application/json:
              schema:

                $ref: '#/components/schemas/bookingSuccess'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'


        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api_agent/booking/roundbooking:
    post:
      tags:
        - Agent one Way Booking Route
      summary: Create Account
      description: This is a private Route.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roundWayBookingRequest'

      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookingSuccess'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api_agent/booking/multicitybooking:
    post:
      tags:
        - Agent multiCity Booking Route
      summary: Create Account
      description: This is a private Route.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/multiCityBookingRequest'

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookingSuccess'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'


        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api_agent/booking/retrieve_booking{id}:
    post:
      tags:
        - Agent Booking Retrieval Route
      summary: Retrieve Booking
      description: This is a private route for retrieving a booking. This is use for get the timeLimit and Airline Pnr

      operationId: retrieveBooking
      parameters:
        - name: id
          in: query
          description: The unique identifier for the booking.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookingSuccessSingle'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'


        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api_agent/booking/cancel{id}:
    delete:
      tags:
        - Agent Booking Retrieval Route
      summary: Retrieve Booking
      description: This is a private route for retrieving a booking. This is use for get the timeLimit and Airline Pnr

      operationId: retrieveBooking
      parameters:
        - name: id
          in: query
          description: The unique identifier for the booking.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bookingSuccessSingle'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'


        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api_agent/booking/air-price:
    post:
      tags:
        - Agent Booking Retrieval Route
      summary: Price list of Booking
      description: This is a private route for air price a booking.

      operationId: retrieveBooking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceRequest'
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/priceOneWayResponse'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'


        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api_agent/booking/air-price-roundWay:
    post:
      tags:
        - Agent Booking Retrieval Route
      summary: Price list of Booking
      description: This is a private route for air price a booking.

      operationId: retrieveBooking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roundWayPriceRequest'
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'

        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/priceOneWayResponse'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'


        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/createWithList:
    post:
      tags:
        - user
      summary: Create list of users with given input array
      description: 'Creates list of users with given input array'
      x-swagger-router-controller: UserController
      operationId: createUsersWithListInput
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Log user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Log current user out
      description: ''
      operationId: logoutUser
      parameters: [ ]
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      x-swagger-router-controller: UserController
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that needs to be updated
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /api_agent/booking/search-results:
    get:
      summary: Retrieve Flight Search Results
      description: |
        Retrieve flight search results based on specified parameters.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneWaySearchBody'


      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    items:

                      $ref: '#/components/schemas/AllOneWayAfterSearch'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeaderMiss'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api_agent/booking/search-resultsRound:
    get:
      tags:
        - Agent Booking Route
      summary: Search Results of RoundWay
      description: Get search results for bookings.
      operationId: afterSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoundWaySearchBody'
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllRoundWayAfterSearch'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeaderMiss'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api_agent/booking/search-multiCity:
    get:
      tags:
        - Agent multiCity after search result
      summary: Information about various flight
      description: This is a private route .

      operationId: afterSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiCityAfterSearchRequestBody'
      responses:
        default:
          description: Default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllMultiCitySearch'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'


        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:

  schemas:
    Order:
      x-swagger-router-model: io.swagger.petstore.model.Order
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          example: approved
        complete:
          type: boolean
      xml:
        name: order
      type: object
    Customer:
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          xml:
            wrapped: true
            name: addresses
      xml:
        name: customer
      type: object
    Address:
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: 94301
      xml:
        name: address
      type: object
    Category:
      x-swagger-router-model: io.swagger.petstore.model.Category
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
      type: object
    User:
      x-swagger-router-model: io.swagger.petstore.model.User
      properties:

        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 12345
        confirmPassword:
          type: string
          example: 12345
        phone:
          type: string
          example: 12345
        company:
          type: string
          format: string
          example: abed
        companyAdd:
          type: string
          format: string(company address)
          example: abed
        picture:
          type: string
          format: image[png,jpg,jpeg]/pdf
          example: company image of the agent

      xml:
        name: user
      type: object
    UserResponse:
      x-swagger-router-model: io.swagger.petstore.model.User
      properties:

        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com(unique)
        password:
          type: string
          example: 12345
        confirmPassword:
          type: string
          example: 12345
        phone:
          type: string
          example: 12345
        company:
          type: string
          format: string(unique company name)
          example: abed
        companyAdd:
          type: string
          format: string(company address unique)
          example: abed
        companyImage:
          type: string
          format: image[png,jpg,jpeg]/pdf
          example: i don't have
        browser:
          type: string
          format: string(browser name)
        platform:
          type: string
          format: string(windows/linux/mobile)
        approvedBy:
          type: string
          format: string 16 bit id oof admin who approve this agent


      xml:
        name: user
      type: object
    Tag:
      x-swagger-router-model: io.swagger.petstore.model.Tag
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
      type: object

    Pet:
      x-swagger-router-model: io.swagger.petstore.model.Pet
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
            xml:
              name: tag
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
      type: object
    ApiResponse:
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
      type: object

    BookingRequest:
      allOf:
        - $ref: '#/components/schemas/RequestBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/Segment'
          required:
            - segments


    roundWayBookingRequest:
      allOf:
        - $ref: '#/components/schemas/RequestBase'
        - type: object
          properties:
            segments:
              type: object
              properties:
                go:
                  type: array
                  description: Must contain one object
                  items:
                    $ref: '#/components/schemas/Segment'
                back:
                  type: array
                  description: Must contain one object
                  items:
                    $ref: '#/components/schemas/Segment'
              required:
                - go
                - back
    multiCityBookingRequest:
      allOf:
        - $ref: '#/components/schemas/RequestBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/Segment'
          required:
            - segments
    PriceRequest:
      allOf:
        - $ref: '#/components/schemas/priceRequestBase'
        - type: object
          properties:
            segments:
              type: array
              items:
                $ref: '#/components/schemas/Segment'
      required:
        - segments
    roundWayPriceRequest:
      allOf:
        - $ref: '#/components/schemas/priceRequestBase'
        - type: object
          properties:
            segments:
              type: object
              properties:
                go:
                  type: array
                  description: Must contain one object
                  items:
                    $ref: '#/components/schemas/Segment'
                back:
                  type: array
                  description: Must contain one object
                  items:
                    $ref: '#/components/schemas/Segment'
              required:
                - go
                - back
      required:
        - segments

    priceRequestBase:
      type: object
      properties:

         adultCount:
            type: number
            format: integer
            description: must be required minimum 1 as number of adult
         childCount:
            type: number
            format: integer
            description: optional, number of adult
         infantCount:
            type: number
            format: integer
            description: optional, number of infant
         tripType:
           type: string
           format: string | integer
           description: |
             Type of trip:
             - Use '1' for one-way trips.
             - Use '2' for round-trip trips.
             - Use '3' for multi-city trips.
         systems:
            type: string
            format: string
            description: system must be system001 for system name
      required:
        - tripType
        - adultCount
        - childCount
        - infantCount



    RequestBase:
      type: object
      properties:
        platform:
          type: string
          description: Platform information although when UI is on live then it may handle in server.
        email:
          type: string
          description: Email address.
        phone:
          type: string
          description: Phone number.
        name:
          type: string
          description: Name.
        passengerData:
          $ref: '#/components/schemas/PassengerInformation'
        system:
          type: string
          description: System information i.e system001.
        tripType:
          type: string
          format: string
          description: description of the flight is one way or round way or multiCity
        searchId:
          type: string
          format: 33 bit hex string
          description: the searchId generate in search result
      required:
        - system
        - segments
        - passengerData
        - platform
        - tripType
        - searchId

    bookingSuccess:
      type: object
      properties:
        id:
          type: string
          pattern: ^[0-9a-fA-F]{32}$|^[0-9a-fA-F]{33}$
          description: |
            Unique identifier for the booking.
            Should be a 32 or 33-bit hexadecimal string.
        bookingId:
          type: string
          description: Booking serial number.



    airPriceResponse:
      type: object
      properties:
        segmentType:
          type: string
          description: Type of travel segment (e.g., "oneWay").
        tripType:
          type: string
          description: Type of trip (e.g., "oneWay").
        journeyType:
          type: string
          description: Type of journey (e.g., "Outbound").
        isRefundable:
          type: boolean
          description: Indicates whether the booking is refundable or not.
        commissionType:
          type: string
          description: Type of commission (e.g., "sabresotti").
        lastTicketDate:
          type: string
          format: date
          description: Last date for ticket issuance (e.g., "2023-11-30").
        validatingCarrier:
          type: string
          description: The airline code for validating carrier (e.g., "BS").
        basePrice:
          type: number
          description: Base price of the booking.
        clientPrice:
          type: number
          description: Client price of the booking.
        agentPrice:
          type: number
          description: Agent price of the booking.
        currency:
          type: string
          description: Currency of the booking (e.g., "BDT").
        totalTax:
          type: number
          description: Total tax amount for the booking.
        ait:
          type: number
          description: Advance Income Tax (AIT) associated with the booking.
        depCity:
          type: string
          description: Departure city code (e.g., "Dubai").
        arrCity:
          type: string
          description: Arrival city code (e.g., "Dhaka").
        commission:
          type: number
          description: Commission amount for the booking.
        fares:
          type: array
          items:
            type: object
            properties:
              paxType:
                type: string
                description: Passenger type (e.g., "ADT").
              passengerCount:
                type: integer
                description: Number of passengers for the fare.
              baseFare:
                type: number
                description: Base fare for the fare.
              tax:
                type: number
                description: Tax amount for the fare.
              totalTax:
                type: number
                description: Total tax amount for the fare.
              totalBaseFareAmount:
                type: number
                description: Total base fare amount for the fare.
              totalBaseFareAmountWithTax:
                type: number
                description: Total base fare amount with tax for the fare.
              currency:
                type: string
                description: Currency of the fare (e.g., "BDT").
              clientPrice:
                type: number
                description: Client price for the fare.
              totalClientPrice:
                type: number
                description: Total client price for the fare.
              serviceFee:
                type: number
                description: Service fee for the fare.
              discount:
                type: number
                description: Discount amount for the fare.
              bag:
                type: string
                description: Baggage information for the fare (e.g., "0 KG").
        travelTime:
          type: string
          format: date-time
          description: Date and time of travel (e.g., "2023-12-20T21:45:00").

    priceOneWayResponse:
      type: object
      properties:
        type: string
        description: Type of the flight segment (e.g., oneWay).
        tripType:
            type: string
            description: Type of the trip (e.g., oneWay, roundWay, multiCity).

        isRefundable:
            type: boolean
            description: Indicates if the booking is refundable.
        immediateIssues:
            type: integer
            description: Number of immediate issues encountered.
        commissionType:
            type: string
            description: Type of commission (e.g., sitti).
        validatingCarrier:
            type: string
            description: Code of the validating carrier.
        basePrice:
            type: integer
            description: Base price of the booking.
        clientPrice:
            type: integer
            description: Price for the client.
        agentPrice:
            type: integer
            description: Price for the agent.
        currency:
            type: string
            description: Currency code (e.g., BDT).
        totalTax:
            type: integer
            description: Total tax amount.
        depCity:
            type: string
            description: Departure city.
        arrCity:
            type: string
            description: Arrival city.
        commission:
            type: number
            description: Commission amount.
        fares:
            type: array
            description: List of fare details for different passenger types.
            items:
              type: object
              properties:
                paxType:
                  type: string
                  description: Type of passenger (e.g., ADT for adult).
                passengerCount:
                  type: integer
                  description: Number of passengers.
                isRefundable:
                  type: boolean
                  description: Indicates if the fare is refundable.
                baseFare:
                  type: integer
                  description: Base fare amount.
                tax:
                  type: integer
                  description: Tax amount.
                totalTax:
                  type: integer
                  description: Total tax amount.
                totalBaseFareAmount:
                  type: integer
                  description: Total base fare amount.
                totalBaseFareAmountWithTax:
                  type: integer
                  description: Total base fare amount including tax.
                currency:
                  type: string
                  description: Currency code for the fare.
                clientPrice:
                  type: integer
                  description: Price for the client.
                totalClientPrice:
                  type: integer
                  description: Total price for the client.
                serviceFee:
                  type: integer
                  description: Service fee amount.
                discount:
                  type: integer
                  description: Discount amount.
                agentPrice:
                  type: integer
                  description: Price for the agent.
                bag:
                  type: string
                  description: Baggage allowance.
        travelTime:
            type: string
            format: date-time
            description: Departure time of the flight segment.


    Segment:
      type: object
      required:
        - marketingCarrier
        - marketingFlightNumber
        - operatingCarrier
        - operatingFlightNumber
        - departure
        - departureDateTime
        - arrival
        - arrivalDateTime
        - bookingClass
      properties:
          marketingCarrier:
            type: string
            description: Marketing carrier code.
          marketingFlightNumber:
            type: integer
            description: Marketing flight number.
          operatingCarrier:
            type: string
            description: Operating carrier code.
          operatingFlightNumber:
            type: integer
            description: Operating flight number.
          departure:
            type: string
            description: Departure airport code.
          departureDateTime:
            type: string
            format: date-time
            description: Departure date and time.
          arrival:
            type: string
            description: Arrival airport code.
          arrivalDateTime:
            type: string
            format: date-time
            description: Arrival date and time.
          bookingClass:
            type: string
            description: Booking class.
    PassengerInformation:
      type: object
      properties:
        adult:
          type: array
          description: must be provide non empty array
          items:
            $ref: '#/components/schemas/Passenger'

        child:
          type: array
          description: can be provide  empty array
          items:
            $ref: '#/components/schemas/Passenger'
        infant:
          type: array
          description: can be provide  empty array
          items:
            $ref: '#/components/schemas/Passenger'
      required:
        - adult
        - child
        - infant
    Passenger:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the passenger.
        lastName:
          type: string
          description: Last name of the passenger.
        gender:
          type: string
          description: Gender of the passenger.
        dob:
          type: string
          format: date
          description: Date of birth of the passenger.
        passNation:
          type: string
          description: Passport nation code of the passenger.
        passNo:
          type: string
          description: Passport number of the passenger.
        passEx:
          type: string
          format: date
          description: Passport expiration date of the passenger.
        type:
          type: string
          description: Type of passenger (e.g., ADT).
        prefix:
          type: string
          description: Prefix of the passenger (e.g., MR).
      required:
        - firstName
        - lastName
        - gender
        - dob
        - type
        - passNation
        - passEx
        - passNo
        - prefix
    AllOneWayAfterSearch:
      allOf:
        - $ref: '#/components/schemas/AfterSearchCommon'
        - properties:
            baggage:
              type: array
              description: contain information about the baggage
              items:
                $ref: '#/components/schemas/BaggageItem'
            priceBreakdown:
              type: array
              items:
                $ref: '#/components/schemas/PriceBreakdown'
            segments:
              type: array
              items:
                $ref: '#/components/schemas/AfterSearchSegment'
            searchId:
              type: string
              description: the id of the search
    AllRoundWayAfterSearch:
      type: object
      properties:
        uuid:
          type: string
          description: Unique identifier for the segment
        system:
          type: string
          description: The system through which the segment is booked
        segment:
          type: integer
          description: Segment number
        tripType:
          type: string
          description: Type of trip (e.g., Outbound)
        carrier:
          type: string
          description: Carrier code
        carrierName:
          type: string
          description: Name of the carrier
        lastTicketedTime:
          type: string
          format: date-time
          description: Time when the last ticket was issued
        basePrice:
          type: number
          description: Base price of the segment
        taxes:
          type: number
          description: Taxes associated with the segment
        agentPrice:
          type: number
          description: Price for the agent
        clientPrice:
          type: number
          description: Price for the client
        commission:
          type: number
          description: Commission amount
        commissionValue:
          type: number
          description: Commission value
        commissionType:
          type: string
          description: Type of commission (e.g., sitti)
        departure:
          type: string
          description: Departure airport code
        departureDate:
          type: string
          format: date
          description: Departure date
        departureTime:
          type: string
          description: Departure time
        arrival:
          type: string
          description: Arrival airport code
        arrivalDate:
          type: string
          format: date
          description: Arrival date
        arrivalTime:
          type: string
          description: Arrival time
        class:
          type: string
          description: Travel class (e.g., Business)
        fareCurrency:
          type: string
          description: Currency of the fare (e.g., BDT)
        totalFlightDuration:
          type: string
          description: Total flight duration
        aitPrice:
          type: number
          description: ait price information of the booking
        transit:
          $ref: '#/components/schemas/transit'
        availableSeat:
          type: string
          description: Number of available seats
        Baggage:
          type: object
          properties:
            go:
              type: array
              items:
                $ref: '#/components/schemas/BaggageItem'
              description: Baggage details for the outbound flight.
            back:
              type: array
              items:
                $ref: '#/components/schemas/BaggageItem'
              description: Baggage details for the return flight.

        isRefundable:
          type: string
          description: Refundable status
        godeparture:
          type: string
          description: The departure airport code for the outbound flight.
        godepartureTime:
          type: string
          description: departure time for the outbound flight.
        godepartureDate:
          type: string
          format: date
          description: The departure date for the outbound flight.
        goarrival:
          type: string
          description: The arrival airport code for the outbound flight.
        goarrivalTime:
          type: string
          description: The arrival time for the outbound flight.
        goarrivalDate:
          type: string
          format: date
          description: The arrival date for the outbound flight.
        backdeparture:
          type: string
          description: The departure airport code for the return flight.
        backdepartureTime:
          type: string
          description: The departure time for the return flight.
        backdepartureDate:
          type: string
          format: date
          description: The departure date for the return flight.
        backarrival:
          type: string
          description: The arrival airport code for the return flight.
        backarrivalTime:
          type: string
          description: The arrival time for the return flight.
        backarrivalDate:
          type: string
          format: date
          description: The arrival date for the return flight.
        totalGoFlightDuration:
          type: string
          description: The total flight duration for the outbound journey.
        totalBackFlightDuration:
          type: string
          description: The total flight duration for the return journey.

        priceBreakdown:
          type: array
          items:
            $ref: '#/components/schemas/PriceBreakdown'
        segments:
          type: object
          properties:
            go:
              type: array
              description: contain information about the go segments
              items:
                $ref: '#/components/schemas/RoundWaySegments'
            back:
              type: array
              description: contain information about the back segments
              items:
                $ref: '#/components/schemas/RoundWaySegments'

    DefaultResponse:
      type: object
      properties:
        message:
          type: string
          description: Null response for unspecified cases

    AfterSearchCommon:
        type: object
        properties:
          uuid:
            type: string
            description: Unique identifier for the segment
          system:
            type: string
            description: The system through which the segment is booked
          segment:
            type: integer
            description: Segment number
          tripType:
            type: string
            description: Type of trip (e.g., Outbound)
          carrier:
            type: string
            description: Carrier code
          carrierName:
            type: string
            description: Name of the carrier
          lastTicketedTime:
            type: string
            format: date-time
            description: Time when the last ticket was issued
          basePrice:
            type: number
            description: Base price of the segment
          taxes:
            type: number
            description: Taxes associated with the segment
          agentPrice:
            type: number
            description: Price for the agent
          clientPrice:
            type: number
            description: Price for the client
          commission:
            type: number
            description: Commission amount
          commissionValue:
            type: number
            description: Commission value
          commissionType:
            type: string
            description: Type of commission (e.g., sitti)
          departure:
            type: string
            description: Departure airport code
          departureDate:
            type: string
            format: date
            description: Departure date
          departureTime:
            type: string
            description: Departure time
          arrival:
            type: string
            description: Arrival airport code
          arrivalDate:
            type: string
            format: date
            description: Arrival date
          arrivalTime:
            type: string
            description: Arrival time
          class:
            type: string
            description: Travel class (e.g., Business)
          fareCurrency:
            type: string
            description: Currency of the fare (e.g., BDT)
          totalFlightDuration:
            type: string
            description: Total flight duration
          transit:
            type: array
            description: contain information about the transit
            properties:
              items:
                $ref: '#/components/schemas/Transit'

          availableSeat:
            type: string
            description: Number of available seats
          isRefundable:
            type: string
            description: Refundable status
          aitPrice:
            type: number
            description: ait price information of the booking



    RoundWaySegments:
      type: object
      properties:
          departureDateAdjustment:
            type: integer
            description: Departure date adjustment.
          codeShared:
            type: string
            description: Code shared information.
          totalElapsedTime:
            type: integer
            description: Total elapsed time for the flight segment.
          airCraft:
            type: string
            description: Aircraft model.
          marketingCarrier:
            type: string
            description: Marketing carrier code.
          marketingCarrierName:
            type: string
            description: Marketing carrier name.
          marketingFlight:
            type: integer
            description: Marketing flight number.
          operatingCarrier:
            type: string
            description: Operating carrier code.
          operatingCarrierName:
            type: string
            description: Operating carrier name.
          operatingFlight:
            type: integer
            description: Operating flight number.
          departure:
            type: string
            description: Departure airport code.
          departureAirport:
            type: string
            description: Departure airport name.
          departureCityCode:
            type: string
            description: Departure city code.
          departureCityName:
            type: string
            description: Departure city name.
          departureCountryCode:
            type: string
            description: Departure country code.
          departureDateTime:
            type: string
            format: date-time
            description: Departure date and time.
          departureTime:
            type: string
            description: Departure time.
          departureDate:
            type: string
            format: date
            description: Departure date.
          departureLocation:
            type: string
            description: Departure location.
          arrival:
            type: string
            description: Arrival airport code.
          arrivalAirport:
            type: string
            description: Arrival airport name.
          arrivalCityCode:
            type: string
            description: Arrival city code.
          arrivalCityName:
            type: string
            description: Arrival city name.
          arrivalCountryCode:
            type: string
            description: Arrival country code.
          arrivalCountryName:
            type: string
            description: Arrival country name.
          arrivalDateTime:
            type: string
            format: date-time
            description: Arrival date and time.
          arrivalTime:
            type: string
            description: Arrival time.
          arrivalDate:
            type: string
            format: date
            description: Arrival date.
          flightDuration:
            type: string
            description: Flight duration.
          dateAdjustment:
            type: integer
            description: Date adjustment.
          Aterminal:
            type: string
            description: Arrival terminal.
          Dterminal:
            type: string
            description: Departure terminal.
          goSegmentCode:
            $ref: '#/components/schemas/SegmentCode'
            description: Segment code for the outbound journey.
          backSegmentCode:
            $ref: '#/components/schemas/SegmentCode'
            description: Segment code for the return journey.
          hiddenStops:
            type: array
            items:
             $ref: '#/components/schemas/HiddenStop'
            description: List of hidden stops.
    SegmentCode:
      type: object
      properties:
        bookingClass:
          type: string
          description: Booking class.
        cabinCode:
          type: string
          description: Cabin code.
        mealCode:
          type: string
          description: Meal code.
        availableSeats:
          type: integer
          description: Number of available seats.
    BaggageItem:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the baggage.
        paxType:
          type: string
          description: The passenger type associated with the baggage (e.g., ADT for adult).
        paxCount:
          type: integer
          description: The number of passengers associated with the baggage.
        airlineCode:
          type: string
          description: The airline code.
        weight:
          type: integer
          description: The weight of the baggage.
        pieceCount:
          type: integer
          nullable: true
          description: The number of pieces of baggage.
        unit:
          type: string
          description: The unit of measurement for the baggage weight (e.g., kg for kilograms).
        allowanceRef:
          type: integer
          description: The reference ID for the baggage allowance.

    HiddenStop:
      type: object
      properties:
        airportName:
          type: string
          description: Name of the airport.
        cityCode:
          type: string
          description: Code of the city.
        cityName:
          type: string
          description: Name of the city.
        countryName:
          type: string
          description: Name of the country.
        departureTime:
          type: string
          description: Departure time.
        arrivalTime:
          type: string
          description: Arrival time.
        stopLocation:
          type: string
          description: Location of the stop (city name and country name).
        elapsedTime:
          type: string
          description: Elapsed time.
        elapsedLayOverTime:
          type: string
          description: Elapsed layover time.
        aircraft:
          type: string
          description: Aircraft information.
    Transit:
      type: object
      properties:
        transit:
          type: string
          description: Indicates whether transit time.
    transit:
      type: object
      properties:
          go:
            type: array
            items:
              $ref: '#/components/schemas/Transit'
            description: Transit details for the outbound journey.
          back:
            type: array
            items:
              $ref: '#/components/schemas/Transit'
            description: Transit details for the return journey.
    AfterSearchSegment:
          type: array
          items:
            type: object
            properties:
              aircraft:
                type: string
                description: Aircraft type
              marketingCarrier:
                type: string
                description: Marketing carrier code
              marketingCarrierName:
                type: string
                description: Marketing carrier name
              marketingFlight:
                type: string
                description: Marketing flight number
              operatingCarrier:
                type: string
                description: Operating carrier code
              operatingCarrierName:
                type: string
                description: Operating carrier name
              operatingFlight:
                type: string
                description: Operating flight number
              departure:
                type: string
                description: Departure airport code
              departureAirport:
                type: string
                description: Departure airport name
              departureLocation:
                type: string
                description: Departure location
              departureCity:
                type: string
                description: Departure city
              departureCountryCode:
                type: string
                description: Departure country code
              departureCountryName:
                type: string
                description: Departure country name
              departureDate:
                type: string
                format: date
                description: Departure date
              departureTime:
                type: string
                description: Departure time
              departureDateTime:
                type: string
                format: date-time
                description: Departure date and time
              arrival:
                type: string
                description: Arrival airport code
              arrivalAirport:
                type: string
                description: Arrival airport name
              arrivalLocation:
                type: string
                description: Arrival location
              arrivalCity:
                type: string
                description: Arrival city
              arrivalCountryCode:
                type: string
                description: Arrival country code
              arrivalCountryName:
                type: string
                description: Arrival country name
              arrivalDate:
                type: string
                format: date
                description: Arrival date
              arrivalDateTime:
                type: string
                format: date-time
                description: Arrival date and time
              arrivalTime:
                type: string
                description: Arrival time
              flightDuration:
                type: string
                description: Flight duration
              bookingClass:
                type: string
                description: Booking class code
              cabinCode:
                type: string
                description: Cabin code
              mealCode:
                type: string
                description: Meal code
              seatAvailable:
                type: string
                description: Number of available seats
              hiddenStops:
                type: array
                items:
                  $ref: '#/components/schemas/HiddenStop'
                description: List of hidden stops.


    PriceBreakdown:
      type: array
      items:
        type: object
        properties:
          paxType:
            type: string
            description: Passenger type code
          paxCount:
            type: integer
            description: Number of passengers
          baseFare:
            type: number
            description: Base fare amount
          totalBaseFare:
            type: number
            description: Total base fare amount
          Tax:
            type: number
            description: Tax amount
          totalTaxAmount:
            type: number
            description: Total tax amount
          totalAmount:
            type: number
            description: Total amount
          discount:
            type: number
            description: Discount amount
          otherCharges:
            type: number
            description: Other charges amount
          serviceFee:
            type: number
            description: Service fee amount
          aitValue:
            type: number
            description: ait value

    OneWaySearchBody:
      type: object
      properties:
        type:
          type: string
          description: Type of the journey (e.g., "oneway").
        departureDate:
          type: string
          format: date
          description: Departure date.
        departure:
          type: string
          description: Departure airport code.
        arrival:
          type: string
          description: Arrival airport code.
        adultCount:
          type: integer
          description: Number of adults.
        childCount:
          type: integer
          description: Number of children.
        infantCount:
          type: integer
          description: Number of infants.
        cabin:
          type: string
          description: Cabin class (e.g., "Economy").
        vendorPref:
          type: array
          description: Vendor preference airlines code (i.e, vendorPref:["BS"]).
        maxStopsQuantity:
          type: integer
          description: the number of stoppage between arrival and departure
      required:
        - type
        - departure
        - departureDate
        - arrival
        - adultCount
        - cabin
    RoundWaySearchBody:
      type: object
      properties:
        type:
          type: string
          description: Type of the journey (e.g., "roundway").
        departureDate:
          type: string
          format: date
          description: Departure date.
        departure:
          type: string
          description: Departure airport code.
        arrivalDate:
          type: string
          format: date
          description: Return journey arrival date.
        arrival:
          type: string
          description: Return journey arrival airport code.
        adultCount:
          type: integer
          description: Number of adults.
        childCount:
          type: integer
          description: Number of children.
        infantCount:
          type: integer
          description: Number of infants.
        cabin:
          type: string
          description: Cabin class (e.g. "Economy").
        vendorPref:
          type: array
          description: Vendor preference airlines code (i.e, vendorPref:["BS"]).
        maxStopsQuantity:
            type: integer
            description: the number of stoppage between arrival and departure

      required:
      - type
      - departure
      - departureDate
      - arrival
      - arrivalDate
      - adultCount
      - cabin
    AllMultiCitySearch:
      type: object
      properties:
        uuid:
          type: string
          description: Unique identifier for the segment
        system:
          type: string
          description: The system through which the segment is booked
        segment:
          type: integer
          description: Segment number
        tripType:
          type: string
          description: Type of trip (e.g., Outbound)
        carrier:
          type: string
          description: Carrier code
        carrierName:
          type: string
          description: Name of the carrier
        lastTicketedTime:
          type: string
          format: date-time
          description: Time when the last ticket was issued
        basePrice:
          type: number
          description: Base price of the segment
        taxes:
          type: number
          description: Taxes associated with the segment
        agentPrice:
          type: number
          description: Price for the agent
        clientPrice:
          type: number
          description: Price for the client
        commission:
          type: number
          description: Commission amount
        commissionValue:
          type: number
          description: Commission value
        commissionType:
          type: string
          description: Type of commission (e.g., sitti)
        departure:
          type: string
          description: Departure airport code
        departureDate:
          type: string
          format: date
          description: Departure date
        departureTime:
          type: string
          description: Departure time
        arrival:
          type: string
          description: Arrival airport code
        arrivalDate:
          type: string
          format: date
          description: Arrival date
        arrivalTime:
          type: string
          description: Arrival time
        class:
          type: string
          description: Travel class (e.g., Business)
        fareCurrency:
          type: string
          description: Currency of the fare (e.g., BDT)
        totalFlightDuration:
          type: string
          description: Total flight duration
        aitPrice:
          type: number
          description: ait price information of the booking

        availableSeat:
          type: string
          description: Number of available seats
        baggage:
          type: string
          description: Baggage allowance

        priceBreakdown:
          type: array
          items:
            $ref: '#/components/schemas/PriceBreakdown'
        CityCount:
          type: object
          properties:
            totalFlightDuration:
              type: string
              description: Total flight duration for the city count.
            departureDate:
              type: string
              format: date
              description: Departure date of the journey.
            departureLocation:
              type: string
              description: Departure location code.
            arrivalLocation:
              type: string
              description: Arrival location code.
            segment:
              type: integer
              description: Segment number.
            transit:
              type: array
              items:
                $ref: '#/components/schemas/Transit'
              description: Transit details for the segment.
            segments:
              type: array
              items:
                $ref: '#/components/schemas/FlightSegment'
              description: List of flight segments for the city count.
        isRefundable:
          type: string
          description: about refund policy

    FlightSegment:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the flight segment.
        departureDateAdjustment:
          type: integer
          description: Departure date adjustment.
        codeShared:
          type: string
          description: Code shared information.
        airCraft:
          type: string
          description: Aircraft model.
        marketingCarrier:
          type: string
          description: Marketing carrier code.
        marketingCarrierName:
          type: string
          description: Marketing carrier name.
        marketingFlight:
          type: integer
          description: Marketing flight number.
        operatingCarrier:
          type: string
          description: Operating carrier code.
        operatingCarrierName:
          type: string
          description: Operating carrier name.
        operatingFlight:
          type: integer
          description: Operating flight number.
        totalMilesFlown:
          type: integer
          description: Total miles flown.
        flightDuration:
          type: string
          description: Flight duration.
        departure:
          type: string
          description: Departure airport code.
        departureAirport:
          type: string
          description: Departure airport name.
        departureDate:
          type: string
          format: date
          description: Departure date.
        departureCityCode:
          type: string
          description: Departure city code.
        departureCityName:
          type: string
          description: Departure city name.
        departureCountryCode:
          type: string
          description: Departure country code.
        departureCountryName:
          type: string
          description: Departure country name.
        departureTime:
          type: string
          description: Departure time.
        departureDateTime:
          type: string
          format: date-time
          description: Departure date and time.
        departureLocation:
          type: string
          description: Departure location.
        arrival:
          type: string
          description: Arrival airport code.
        arrivalAirport:
          type: string
          description: Arrival airport name.
        arrivalCityCode:
          type: string
          description: Arrival city code.
        arrivalCityName:
          type: string
          description: Arrival city name.
        arrivalCountryCode:
          type: string
          description: Arrival country code.
        arrivalCountryName:
          type: string
          description: Arrival country name.
        arrivalLocation:
          type: string
          description: Arrival location.
        arrivalDate:
          type: string
          format: date
          description: Arrival date.
        arrivalTime:
          type: string
          description: Arrival time.
        dateAdjustment:
          type: integer
          description: Date adjustment.
        arrivalDateTime:
          type: string
          format: date-time
          description: Arrival date and time.
        Dterminal:
          type: string
          description: Departure terminal.
        Aterminal:
          type: string
          description: Arrival terminal.
        bookingClass:
          type: string
          description: Booking class.
        cabinCode:
          type: string
          description: Cabin code.
        terminal:
          type: string
          description: Terminal.
        availableSeats:
          type: integer
          description: Number of available seats.
        hiddenStops:
          type: array
          items:
            $ref: '#/components/schemas/HiddenStop'
          description: List of hidden stops.
    MultiCityAfterSearchRequestBody:
      type: object
      properties:
        type:
          type: string
          description: The type of the search (e.g., multicity).
        adultCount:
          type: integer
          description: The number of adult passengers.
          minLength: 1
        childCount:
          type: integer
          description: The number of child passengers.
        infantCount:
          type: integer
          description: The number of infant passengers.
        cabin:
          type: string
          description: The cabin class (e.g., Business).
        vendorPref:
          type: array
          description: Vendor preference airlines code (i.e, vendorPref:["BS"]).
        maxStopsQuantity:
            type: integer
            description: the number of stoppage between arrival and departure
        segmentsList:
          type: array
          items:
            $ref: '#/components/schemas/MultiCitySegment'
      required:
        - type
        - description
        - adultCount
        - cabin
        - segmentsList

    MultiCitySegment:
      type: object
      properties:
        departure:
          type: string
          description: The departure airport code.
        arrival:
          type: string
          description: The arrival airport code.
        departureDate:
          type: string
          format: date
          description: The departure date.
      required:
        - departure
        - departureDate
        - arrival


    TokenNotFound:
      type: object
      properties:
        success:
          type: boolean
          description: Always false.
        message:
          type: string
          description: Error message indicating the reason for the failure.
    HeaderMiss:
            type: object
            properties:
              success:
                type: boolean
                description: always false
              message:
                type: string
                description: Authorization header missing

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32

        message:
          type: string

  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
    BearerAuth:
      type: apiKey
      name: Authorization
      in: header
